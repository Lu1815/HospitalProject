// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Testing.Models;

#nullable disable

namespace Testing.Migrations
{
    [DbContext(typeof(BDHospitalContext))]
    partial class BDHospitalContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("Modern_Spanish_CI_AS")
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Testing.Models.Boton", b =>
                {
                    b.Property<int>("Iidboton")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IIDBOTON");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Iidboton"), 1L, 1);

                    b.Property<int?>("Bhabilitado")
                        .HasColumnType("int")
                        .HasColumnName("BHABILITADO");

                    b.Property<string>("Descripcion")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("DESCRIPCION");

                    b.Property<string>("Nombre")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("NOMBRE");

                    b.HasKey("Iidboton")
                        .HasName("PK__BOTON__90C2312F68927075");

                    b.ToTable("Boton", (string)null);
                });

            modelBuilder.Entity("Testing.Models.CitaMedicamento", b =>
                {
                    b.Property<int>("Iidcitamedicamento")
                        .HasColumnType("int")
                        .HasColumnName("IIDCITAMEDICAMENTO");

                    b.Property<int?>("Bhabilitado")
                        .HasColumnType("int")
                        .HasColumnName("BHABILITADO");

                    b.Property<int?>("Cantidad")
                        .HasColumnType("int")
                        .HasColumnName("CANTIDAD");

                    b.Property<int?>("Iidcita")
                        .HasColumnType("int")
                        .HasColumnName("IIDCITA");

                    b.Property<int?>("Iidmedicamento")
                        .HasColumnType("int")
                        .HasColumnName("IIDMEDICAMENTO");

                    b.Property<decimal?>("Precio")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("PRECIO");

                    b.HasKey("Iidcitamedicamento")
                        .HasName("PK__citamedi__E4CCE514844E03D5");

                    b.HasIndex("Iidcita");

                    b.HasIndex("Iidmedicamento");

                    b.ToTable("CitaMedicamento", (string)null);
                });

            modelBuilder.Entity("Testing.Models.Citum", b =>
                {
                    b.Property<int>("Iidcita")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IIDCITA");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Iidcita"), 1L, 1);

                    b.Property<int?>("Bhabilitado")
                        .HasColumnType("int")
                        .HasColumnName("BHABILITADO");

                    b.Property<string>("Descripcionenfermedad")
                        .HasMaxLength(300)
                        .IsUnicode(false)
                        .HasColumnType("varchar(300)")
                        .HasColumnName("DESCRIPCIONENFERMEDAD");

                    b.Property<DateTime?>("Dfechacita")
                        .HasColumnType("datetime")
                        .HasColumnName("DFECHACITA");

                    b.Property<DateTime?>("Dfechainicioenfermedad")
                        .HasColumnType("datetime")
                        .HasColumnName("DFECHAINICIOENFERMEDAD");

                    b.Property<string>("Diagnostico")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("DIAGNOSTICO");

                    b.Property<decimal?>("Estatura")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("ESTATURA");

                    b.Property<string>("Examenfisico")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("EXAMENFISICO");

                    b.Property<string>("Examenlaboratorio")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("EXAMENLABORATORIO");

                    b.Property<int?>("Iiddoctorasignado")
                        .HasColumnType("int")
                        .HasColumnName("IIDDOCTORASIGNADO");

                    b.Property<int?>("Iidestadocita")
                        .HasColumnType("int")
                        .HasColumnName("IIDESTADOCITA");

                    b.Property<int?>("Iidpersona")
                        .HasColumnType("int")
                        .HasColumnName("IIDPERSONA");

                    b.Property<int?>("Iidsede")
                        .HasColumnType("int")
                        .HasColumnName("IIDSEDE");

                    b.Property<int?>("Iidusuario")
                        .HasColumnType("int")
                        .HasColumnName("IIDUSUARIO");

                    b.Property<decimal?>("Peso")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("PESO");

                    b.Property<decimal?>("Precioatencion")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("PRECIOATENCION");

                    b.Property<decimal?>("Totalpagar")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("TOTALPAGAR");

                    b.HasKey("Iidcita")
                        .HasName("PK_Consulta");

                    b.HasIndex("Iiddoctorasignado");

                    b.HasIndex("Iidestadocita");

                    b.HasIndex("Iidpersona");

                    b.HasIndex("Iidsede");

                    b.HasIndex("Iidusuario");

                    b.ToTable("Cita");
                });

            modelBuilder.Entity("Testing.Models.Doctor", b =>
                {
                    b.Property<int>("Iiddoctor")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IIDDOCTOR");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Iiddoctor"), 1L, 1);

                    b.Property<int?>("Bhabilitado")
                        .HasColumnType("int")
                        .HasColumnName("BHABILITADO");

                    b.Property<DateTime?>("Fechacontrato")
                        .HasColumnType("datetime")
                        .HasColumnName("FECHACONTRATO");

                    b.Property<int?>("Iidespecialidad")
                        .HasColumnType("int")
                        .HasColumnName("IIDESPECIALIDAD");

                    b.Property<int?>("Iidpersona")
                        .HasColumnType("int")
                        .HasColumnName("IIDPERSONA");

                    b.Property<int?>("Iidsede")
                        .HasColumnType("int")
                        .HasColumnName("IIDSEDE");

                    b.Property<decimal?>("Sueldo")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("SUELDO");

                    b.HasKey("Iiddoctor");

                    b.HasIndex("Iidespecialidad");

                    b.HasIndex("Iidpersona");

                    b.HasIndex("Iidsede");

                    b.ToTable("Doctor", (string)null);
                });

            modelBuilder.Entity("Testing.Models.Especialidad", b =>
                {
                    b.Property<int>("Iidespecialidad")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IIDESPECIALIDAD");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Iidespecialidad"), 1L, 1);

                    b.Property<int?>("Bhabilitado")
                        .HasColumnType("int")
                        .HasColumnName("BHABILITADO");

                    b.Property<string>("Descripcion")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("DESCRIPCION");

                    b.Property<string>("Nombre")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("NOMBRE");

                    b.HasKey("Iidespecialidad")
                        .HasName("PK_TipoEspecialidad");

                    b.ToTable("Especialidad", (string)null);
                });

            modelBuilder.Entity("Testing.Models.EstadoCitum", b =>
                {
                    b.Property<int>("Iidestado")
                        .HasColumnType("int")
                        .HasColumnName("IIDESTADO");

                    b.Property<int?>("Bhabilitado")
                        .HasColumnType("int")
                        .HasColumnName("BHABILITADO");

                    b.Property<string>("Vdescripcion")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("VDESCRIPCION");

                    b.Property<string>("Vnombre")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("VNOMBRE");

                    b.HasKey("Iidestado")
                        .HasName("PK__ESTACITA__CB0F471FE45B7978");

                    b.ToTable("EstadoCita");
                });

            modelBuilder.Entity("Testing.Models.FormaFarmaceutica", b =>
                {
                    b.Property<int>("Iidformafarmaceutica")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IIDFORMAFARMACEUTICA");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Iidformafarmaceutica"), 1L, 1);

                    b.Property<int?>("Bhabilitado")
                        .HasColumnType("int")
                        .HasColumnName("BHABILITADO");

                    b.Property<string>("Nombre")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("NOMBRE");

                    b.HasKey("Iidformafarmaceutica");

                    b.ToTable("FormaFarmaceutica", (string)null);
                });

            modelBuilder.Entity("Testing.Models.HistorialCitum", b =>
                {
                    b.Property<int>("Iidhistorialcita")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IIDHISTORIALCITA");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Iidhistorialcita"), 1L, 1);

                    b.Property<DateTime?>("Dfecha")
                        .HasColumnType("datetime")
                        .HasColumnName("DFECHA");

                    b.Property<int?>("Iidcita")
                        .HasColumnType("int")
                        .HasColumnName("IIDCITA");

                    b.Property<int?>("Iidestado")
                        .HasColumnType("int")
                        .HasColumnName("IIDESTADO");

                    b.Property<int?>("Iidusuario")
                        .HasColumnType("int")
                        .HasColumnName("IIDUSUARIO");

                    b.Property<string>("Vobservacion")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("VOBSERVACION");

                    b.HasKey("Iidhistorialcita")
                        .HasName("PK__Historia__35A9F434FABE77C7");

                    b.HasIndex("Iidcita");

                    b.HasIndex("Iidestado");

                    b.HasIndex("Iidusuario");

                    b.ToTable("HistorialCita");
                });

            modelBuilder.Entity("Testing.Models.Medicamento", b =>
                {
                    b.Property<int>("Iidmedicamento")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IIDMEDICAMENTO");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Iidmedicamento"), 1L, 1);

                    b.Property<int?>("Bhabilitado")
                        .HasColumnType("int")
                        .HasColumnName("BHABILITADO");

                    b.Property<string>("Concentracion")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("CONCENTRACION");

                    b.Property<int?>("Iidformafarmaceutica")
                        .HasColumnType("int")
                        .HasColumnName("IIDFORMAFARMACEUTICA");

                    b.Property<string>("Nombre")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("NOMBRE");

                    b.Property<decimal?>("Precio")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("PRECIO");

                    b.Property<string>("Presentacion")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("PRESENTACION");

                    b.Property<int?>("Stock")
                        .HasColumnType("int")
                        .HasColumnName("STOCK");

                    b.HasKey("Iidmedicamento");

                    b.HasIndex("Iidformafarmaceutica");

                    b.ToTable("Medicamento", (string)null);
                });

            modelBuilder.Entity("Testing.Models.Paciente", b =>
                {
                    b.Property<int>("Iidpaciente")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IIDPACIENTE");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Iidpaciente"), 1L, 1);

                    b.Property<string>("Alergias")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("ALERGIAS");

                    b.Property<string>("Antecedentesquirurgicos")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("ANTECEDENTESQUIRURGICOS");

                    b.Property<int?>("Bhabilitado")
                        .HasColumnType("int")
                        .HasColumnName("BHABILITADO");

                    b.Property<string>("Cuadrovacunas")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("CUADROVACUNAS");

                    b.Property<string>("Enfermedadescronicas")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("ENFERMEDADESCRONICAS");

                    b.Property<int?>("Iidpersona")
                        .HasColumnType("int")
                        .HasColumnName("IIDPERSONA");

                    b.Property<int?>("Iidtiposangre")
                        .HasColumnType("int")
                        .HasColumnName("IIDTIPOSANGRE");

                    b.HasKey("Iidpaciente")
                        .HasName("PK_Pacientes_1");

                    b.HasIndex("Iidtiposangre");

                    b.ToTable("Paciente", (string)null);
                });

            modelBuilder.Entity("Testing.Models.Pagina", b =>
                {
                    b.Property<int>("Iidpagina")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IIDPAGINA");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Iidpagina"), 1L, 1);

                    b.Property<string>("Accion")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ACCION");

                    b.Property<int?>("Bhabilitado")
                        .HasColumnType("int")
                        .HasColumnName("BHABILITADO");

                    b.Property<string>("Controlador")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("CONTROLADOR");

                    b.Property<string>("Mensaje")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("MENSAJE");

                    b.HasKey("Iidpagina")
                        .HasName("PK__Pagina__8E759E4E24D07BF3");

                    b.ToTable("Pagina", (string)null);
                });

            modelBuilder.Entity("Testing.Models.Persona", b =>
                {
                    b.Property<int>("Iidpersona")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IIDPERSONA");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Iidpersona"), 1L, 1);

                    b.Property<string>("Apmaterno")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("APMATERNO");

                    b.Property<string>("Appaterno")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("APPATERNO");

                    b.Property<int?>("Bdoctor")
                        .HasColumnType("int")
                        .HasColumnName("BDOCTOR");

                    b.Property<int?>("Bhabilitado")
                        .HasColumnType("int")
                        .HasColumnName("BHABILITADO");

                    b.Property<int?>("Bpaciente")
                        .HasColumnType("int")
                        .HasColumnName("BPACIENTE");

                    b.Property<int?>("Btieneusuario")
                        .HasColumnType("int")
                        .HasColumnName("BTIENEUSUARIO");

                    b.Property<string>("Direccion")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("DIRECCION");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("EMAIL");

                    b.Property<DateTime?>("Fechanacimiento")
                        .HasColumnType("datetime")
                        .HasColumnName("FECHANACIMIENTO");

                    b.Property<string>("Foto")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("FOTO");

                    b.Property<int?>("Iidsexo")
                        .HasColumnType("int")
                        .HasColumnName("IIDSEXO");

                    b.Property<int?>("Iidusuario")
                        .HasColumnType("int")
                        .HasColumnName("IIDUSUARIO");

                    b.Property<string>("Nombre")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("NOMBRE");

                    b.Property<string>("Telefonocelular")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("TELEFONOCELULAR");

                    b.Property<string>("Telefonofijo")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("TELEFONOFIJO");

                    b.HasKey("Iidpersona")
                        .HasName("PK_Paciente");

                    b.HasIndex("Iidsexo");

                    b.HasIndex("Iidusuario");

                    b.ToTable("Persona", (string)null);
                });

            modelBuilder.Entity("Testing.Models.Sede", b =>
                {
                    b.Property<int>("Iidsede")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IIDSEDE");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Iidsede"), 1L, 1);

                    b.Property<int?>("Bhabilitado")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("BHABILITADO")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("Direccion")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("DIRECCION");

                    b.Property<string>("Nombre")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("NOMBRE");

                    b.HasKey("Iidsede")
                        .HasName("PK_Clinica");

                    b.ToTable("Sede", (string)null);
                });

            modelBuilder.Entity("Testing.Models.Sexo", b =>
                {
                    b.Property<int>("Iidsexo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IIDSEXO");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Iidsexo"), 1L, 1);

                    b.Property<int?>("Bhabilitado")
                        .HasColumnType("int")
                        .HasColumnName("BHABILITADO");

                    b.Property<string>("Nombre")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("NOMBRE");

                    b.HasKey("Iidsexo");

                    b.ToTable("Sexo", (string)null);
                });

            modelBuilder.Entity("Testing.Models.TipoSangre", b =>
                {
                    b.Property<int>("Iidtiposangre")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IIDTIPOSANGRE");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Iidtiposangre"), 1L, 1);

                    b.Property<int?>("Bhabilitado")
                        .HasColumnType("int")
                        .HasColumnName("BHABILITADO");

                    b.Property<string>("Nombre")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("NOMBRE");

                    b.HasKey("Iidtiposangre");

                    b.ToTable("TipoSangre", (string)null);
                });

            modelBuilder.Entity("Testing.Models.TipoUsuario", b =>
                {
                    b.Property<int>("Iidtipousuario")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IIDTIPOUSUARIO");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Iidtipousuario"), 1L, 1);

                    b.Property<int?>("Bhabilitado")
                        .HasColumnType("int")
                        .HasColumnName("BHABILITADO");

                    b.Property<string>("Descripcion")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("DESCRIPCION");

                    b.Property<string>("Nombre")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("NOMBRE");

                    b.HasKey("Iidtipousuario");

                    b.ToTable("TipoUsuario", (string)null);
                });

            modelBuilder.Entity("Testing.Models.TipoUsuarioPagina", b =>
                {
                    b.Property<int>("Iidtipousuariopagina")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IIDTIPOUSUARIOPAGINA");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Iidtipousuariopagina"), 1L, 1);

                    b.Property<int?>("Bhabilitado")
                        .HasColumnType("int")
                        .HasColumnName("BHABILITADO");

                    b.Property<int?>("Iidpagina")
                        .HasColumnType("int")
                        .HasColumnName("IIDPAGINA");

                    b.Property<int?>("Iidtipousuario")
                        .HasColumnType("int")
                        .HasColumnName("IIDTIPOUSUARIO");

                    b.Property<int?>("Iidvista")
                        .HasColumnType("int")
                        .HasColumnName("IIDVISTA");

                    b.HasKey("Iidtipousuariopagina")
                        .HasName("PK__TipoUsua__59B815B9209568AC");

                    b.HasIndex("Iidpagina");

                    b.HasIndex("Iidtipousuario");

                    b.ToTable("TipoUsuarioPagina", (string)null);
                });

            modelBuilder.Entity("Testing.Models.TipoUsuarioPaginaBoton", b =>
                {
                    b.Property<int>("Iidtipousuariopaginaboton")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IIDTIPOUSUARIOPAGINABOTON");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Iidtipousuariopaginaboton"), 1L, 1);

                    b.Property<int?>("Bhabilitado")
                        .HasColumnType("int")
                        .HasColumnName("BHABILITADO");

                    b.Property<int?>("Iidboton")
                        .HasColumnType("int")
                        .HasColumnName("IIDBOTON");

                    b.Property<int?>("Iidtipousuariopagina")
                        .HasColumnType("int")
                        .HasColumnName("IIDTIPOUSUARIOPAGINA");

                    b.HasKey("Iidtipousuariopaginaboton")
                        .HasName("PK__TipoUsua__7882D20C06997AB0");

                    b.HasIndex("Iidboton");

                    b.HasIndex("Iidtipousuariopagina");

                    b.ToTable("TipoUsuarioPaginaBoton", (string)null);
                });

            modelBuilder.Entity("Testing.Models.Usuario", b =>
                {
                    b.Property<int>("Iidusuario")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IIDUSUARIO");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Iidusuario"), 1L, 1);

                    b.Property<int?>("Bhabilitado")
                        .HasColumnType("int")
                        .HasColumnName("BHABILITADO");

                    b.Property<string>("Contraseña")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("CONTRASEÑA");

                    b.Property<int?>("Iidpersona")
                        .HasColumnType("int")
                        .HasColumnName("IIDPERSONA");

                    b.Property<int>("Iidtipousuario")
                        .HasColumnType("int")
                        .HasColumnName("IIDTIPOUSUARIO");

                    b.Property<string>("Nombreusuario")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("NOMBREUSUARIO");

                    b.HasKey("Iidusuario");

                    b.HasIndex("Iidpersona");

                    b.HasIndex("Iidtipousuario");

                    b.ToTable("Usuario", (string)null);
                });

            modelBuilder.Entity("Testing.Models.CitaMedicamento", b =>
                {
                    b.HasOne("Testing.Models.Citum", "IidcitaNavigation")
                        .WithMany("CitaMedicamentos")
                        .HasForeignKey("Iidcita")
                        .HasConstraintName("FK__citamedic__IIDCI__03F0984C");

                    b.HasOne("Testing.Models.Medicamento", "IidmedicamentoNavigation")
                        .WithMany("CitaMedicamentos")
                        .HasForeignKey("Iidmedicamento")
                        .HasConstraintName("FK__citamedic__IIDME__04E4BC85");

                    b.Navigation("IidcitaNavigation");

                    b.Navigation("IidmedicamentoNavigation");
                });

            modelBuilder.Entity("Testing.Models.Citum", b =>
                {
                    b.HasOne("Testing.Models.Doctor", "IiddoctorasignadoNavigation")
                        .WithMany("Cita")
                        .HasForeignKey("Iiddoctorasignado")
                        .HasConstraintName("FK__Cita__IIDDOCTORA__01142BA1");

                    b.HasOne("Testing.Models.EstadoCitum", "IidestadocitaNavigation")
                        .WithMany("Cita")
                        .HasForeignKey("Iidestadocita")
                        .HasConstraintName("FK__Cita__IIDESTADOC__7E37BEF6");

                    b.HasOne("Testing.Models.Persona", "IidpersonaNavigation")
                        .WithMany("Cita")
                        .HasForeignKey("Iidpersona")
                        .HasConstraintName("FK__Cita__IIDPERSONA__2739D489");

                    b.HasOne("Testing.Models.Sede", "IidsedeNavigation")
                        .WithMany("Cita")
                        .HasForeignKey("Iidsede")
                        .HasConstraintName("FK__Cita__IIDSEDE__7F2BE32F");

                    b.HasOne("Testing.Models.Usuario", "IidusuarioNavigation")
                        .WithMany("Cita")
                        .HasForeignKey("Iidusuario")
                        .HasConstraintName("FK__Cita__IIDUSUARIO__7C4F7684");

                    b.Navigation("IiddoctorasignadoNavigation");

                    b.Navigation("IidestadocitaNavigation");

                    b.Navigation("IidpersonaNavigation");

                    b.Navigation("IidsedeNavigation");

                    b.Navigation("IidusuarioNavigation");
                });

            modelBuilder.Entity("Testing.Models.Doctor", b =>
                {
                    b.HasOne("Testing.Models.Especialidad", "IidespecialidadNavigation")
                        .WithMany("Doctors")
                        .HasForeignKey("Iidespecialidad")
                        .HasConstraintName("FK_Doctor_Especialidad");

                    b.HasOne("Testing.Models.Persona", "IidpersonaNavigation")
                        .WithMany("Doctors")
                        .HasForeignKey("Iidpersona")
                        .HasConstraintName("FK__Doctor__IIDPERSO__693CA210");

                    b.HasOne("Testing.Models.Sede", "IidsedeNavigation")
                        .WithMany("Doctors")
                        .HasForeignKey("Iidsede")
                        .HasConstraintName("FK_Doctor_Clinica");

                    b.Navigation("IidespecialidadNavigation");

                    b.Navigation("IidpersonaNavigation");

                    b.Navigation("IidsedeNavigation");
                });

            modelBuilder.Entity("Testing.Models.HistorialCitum", b =>
                {
                    b.HasOne("Testing.Models.Citum", "IidcitaNavigation")
                        .WithMany("HistorialCita")
                        .HasForeignKey("Iidcita")
                        .HasConstraintName("FK__Historial__IIDCI__07C12930");

                    b.HasOne("Testing.Models.EstadoCitum", "IidestadoNavigation")
                        .WithMany("HistorialCita")
                        .HasForeignKey("Iidestado")
                        .HasConstraintName("FK__Historial__IIDES__08B54D69");

                    b.HasOne("Testing.Models.Usuario", "IidusuarioNavigation")
                        .WithMany("HistorialCita")
                        .HasForeignKey("Iidusuario")
                        .HasConstraintName("FK__Historial__IIDUS__09A971A2");

                    b.Navigation("IidcitaNavigation");

                    b.Navigation("IidestadoNavigation");

                    b.Navigation("IidusuarioNavigation");
                });

            modelBuilder.Entity("Testing.Models.Medicamento", b =>
                {
                    b.HasOne("Testing.Models.FormaFarmaceutica", "IidformafarmaceuticaNavigation")
                        .WithMany("Medicamentos")
                        .HasForeignKey("Iidformafarmaceutica")
                        .HasConstraintName("FK__Medicamen__IIDFO__36B12243");

                    b.Navigation("IidformafarmaceuticaNavigation");
                });

            modelBuilder.Entity("Testing.Models.Paciente", b =>
                {
                    b.HasOne("Testing.Models.TipoSangre", "IidtiposangreNavigation")
                        .WithMany("Pacientes")
                        .HasForeignKey("Iidtiposangre")
                        .HasConstraintName("FK__Paciente__IIDTIP__17036CC0");

                    b.Navigation("IidtiposangreNavigation");
                });

            modelBuilder.Entity("Testing.Models.Persona", b =>
                {
                    b.HasOne("Testing.Models.Sexo", "IidsexoNavigation")
                        .WithMany("Personas")
                        .HasForeignKey("Iidsexo")
                        .HasConstraintName("FK_Paciente_Sexo");

                    b.HasOne("Testing.Models.Usuario", "IidusuarioNavigation")
                        .WithMany("Personas")
                        .HasForeignKey("Iidusuario")
                        .HasConstraintName("FK__Persona__IIDUSUA__282DF8C2");

                    b.Navigation("IidsexoNavigation");

                    b.Navigation("IidusuarioNavigation");
                });

            modelBuilder.Entity("Testing.Models.TipoUsuarioPagina", b =>
                {
                    b.HasOne("Testing.Models.Pagina", "IidpaginaNavigation")
                        .WithMany("TipoUsuarioPaginas")
                        .HasForeignKey("Iidpagina")
                        .HasConstraintName("FK__TipoUsuar__IIDPA__75A278F5");

                    b.HasOne("Testing.Models.TipoUsuario", "IidtipousuarioNavigation")
                        .WithMany("TipoUsuarioPaginas")
                        .HasForeignKey("Iidtipousuario")
                        .HasConstraintName("FK__TipoUsuar__IIDTI__74AE54BC");

                    b.Navigation("IidpaginaNavigation");

                    b.Navigation("IidtipousuarioNavigation");
                });

            modelBuilder.Entity("Testing.Models.TipoUsuarioPaginaBoton", b =>
                {
                    b.HasOne("Testing.Models.Boton", "IidbotonNavigation")
                        .WithMany("TipoUsuarioPaginaBotons")
                        .HasForeignKey("Iidboton")
                        .HasConstraintName("FK__TipoUsuar__IIDBO__797309D9");

                    b.HasOne("Testing.Models.TipoUsuarioPagina", "IidtipousuariopaginaNavigation")
                        .WithMany("TipoUsuarioPaginaBotons")
                        .HasForeignKey("Iidtipousuariopagina")
                        .HasConstraintName("FK__TipoUsuar__IIDTI__787EE5A0");

                    b.Navigation("IidbotonNavigation");

                    b.Navigation("IidtipousuariopaginaNavigation");
                });

            modelBuilder.Entity("Testing.Models.Usuario", b =>
                {
                    b.HasOne("Testing.Models.Persona", "IidpersonaNavigation")
                        .WithMany("Usuarios")
                        .HasForeignKey("Iidpersona")
                        .HasConstraintName("FK__Usuario__IIDPERS__14270015");

                    b.HasOne("Testing.Models.TipoUsuario", "IidtipousuarioNavigation")
                        .WithMany("Usuarios")
                        .HasForeignKey("Iidtipousuario")
                        .IsRequired()
                        .HasConstraintName("FK__Usuario__IIDTIPO__68487DD7");

                    b.Navigation("IidpersonaNavigation");

                    b.Navigation("IidtipousuarioNavigation");
                });

            modelBuilder.Entity("Testing.Models.Boton", b =>
                {
                    b.Navigation("TipoUsuarioPaginaBotons");
                });

            modelBuilder.Entity("Testing.Models.Citum", b =>
                {
                    b.Navigation("CitaMedicamentos");

                    b.Navigation("HistorialCita");
                });

            modelBuilder.Entity("Testing.Models.Doctor", b =>
                {
                    b.Navigation("Cita");
                });

            modelBuilder.Entity("Testing.Models.Especialidad", b =>
                {
                    b.Navigation("Doctors");
                });

            modelBuilder.Entity("Testing.Models.EstadoCitum", b =>
                {
                    b.Navigation("Cita");

                    b.Navigation("HistorialCita");
                });

            modelBuilder.Entity("Testing.Models.FormaFarmaceutica", b =>
                {
                    b.Navigation("Medicamentos");
                });

            modelBuilder.Entity("Testing.Models.Medicamento", b =>
                {
                    b.Navigation("CitaMedicamentos");
                });

            modelBuilder.Entity("Testing.Models.Pagina", b =>
                {
                    b.Navigation("TipoUsuarioPaginas");
                });

            modelBuilder.Entity("Testing.Models.Persona", b =>
                {
                    b.Navigation("Cita");

                    b.Navigation("Doctors");

                    b.Navigation("Usuarios");
                });

            modelBuilder.Entity("Testing.Models.Sede", b =>
                {
                    b.Navigation("Cita");

                    b.Navigation("Doctors");
                });

            modelBuilder.Entity("Testing.Models.Sexo", b =>
                {
                    b.Navigation("Personas");
                });

            modelBuilder.Entity("Testing.Models.TipoSangre", b =>
                {
                    b.Navigation("Pacientes");
                });

            modelBuilder.Entity("Testing.Models.TipoUsuario", b =>
                {
                    b.Navigation("TipoUsuarioPaginas");

                    b.Navigation("Usuarios");
                });

            modelBuilder.Entity("Testing.Models.TipoUsuarioPagina", b =>
                {
                    b.Navigation("TipoUsuarioPaginaBotons");
                });

            modelBuilder.Entity("Testing.Models.Usuario", b =>
                {
                    b.Navigation("Cita");

                    b.Navigation("HistorialCita");

                    b.Navigation("Personas");
                });
#pragma warning restore 612, 618
        }
    }
}
